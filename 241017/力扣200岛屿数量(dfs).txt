class Solution {
public:
    int n;
    int m;
    bool judge(int x,int y,const vector<vector<bool>>& visit ,const vector<vector<char>>& grid){
        return x>=0&&x<n&&y>=0&&y<m&&visit[x][y]==false&&grid[x][y]=='1';
    }

    void dfs(int x,int y,vector<vector<bool>>& visit,const vector<vector<char>>& grid){
        int dx[]={0,-1,0,1};
        int dy[]={-1,0,1,0};
        visit[x][y]=true;
        for(int i=0;i<4;i++){
            int nx=x+dx[i];
            int ny=y+dy[i];
            if(judge(nx,ny,visit,grid)){
                dfs(nx,ny,visit,grid);
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        n=grid.size();
        m=grid[0].size();
        vector<vector<bool>> visit(n,vector<bool>(m,false));
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(judge(i,j,visit,grid)){
                    dfs(i,j,visit,grid);
                    ans++;
                }
            }
        }
        return ans;
    }

};