class Solution {
    private static int N=1005;
    private int[] fa=new int[N];
    private int n;

    private void build(){
        for(int i=1;i<N;i++){
            fa[i]=i;
        }
    }

    private int find(int x){
        if(fa[x]!=x){
            fa[x]=find(fa[x]);
        }
        return fa[x];
    }

    private void union(int x,int y){
        int fx=find(x);
        int fy=find(y);
        fa[fx]=fy;
    }

    private boolean isSameSet(int x,int y){
        return find(x)==find(y);
    }

    public int[] findRedundantConnection(int[][] edges) {
        build();
        int[] ans=new int[2];
        for(int i=0;i<edges.length;i++){
                if(isSameSet(edges[i][0],edges[i][1])){
                    ans[0]=edges[i][0];
                    ans[1]=edges[i][1];
                    break;
                }
                union(edges[i][0],edges[i][1]);
        }
        return ans;
    }
}