class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        int n = heights.length;
        int l = ladders;
        int r = n - 1;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(heights, bricks, ladders, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return r;
    }

    public boolean check(int[] heights, int bricks, int ladders, int destination) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 1; i <= destination; i++) {
            if (heights[i] > heights[i - 1]) {
                int diff = heights[i] - heights[i - 1];
                pq.offer(diff);
            }
        }
        while (!pq.isEmpty()) {
            int diff = pq.poll();
            if (bricks >= diff) {
                bricks -= diff;
            } else if (ladders > 0) {
                ladders--;
            } else {
                return false;
            }
        }
        return true;
    }
}
