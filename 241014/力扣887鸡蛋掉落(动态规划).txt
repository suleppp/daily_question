class Solution {
    private Map<String, Integer> memo = new HashMap<>(); // 缓存表

    public int superEggDrop(int k, int n) {
        // 动态规划
        // 当前拥有的状态: 有几个鸡蛋和需要测试的楼层数
        // 选择: 去哪层楼扔鸡蛋
        // base case: n==0 的时候不用扔, k==1 的时候要遍历所有楼层
        // dp[k][n]: k个鸡蛋, n层楼, 最坏情况下的最小的操作次数
        // 如果碎了 dp[k-1][i-1] 如果没碎 dp[k][n-i]
        return dp(k, n);
    }

    public int dp(int k, int n) {
        if (n == 0) return 0; // 没有楼层，不需要扔
        if (k == 1) return n; // 只有一个鸡蛋，需要逐层测试
        if (memo.containsKey(k + "," + n)) {
            return memo.get(k + "," + n); // 使用缓存避免重复计算
        }

        int res = Integer.MAX_VALUE;
        /*
        //一层楼一层楼试
        for(int i=1;i<=n;i++){
            res=Math.min(res,Math.max(dp(k,n-i),dp(k-1,i-1))+1);
        }
        */

        // 使用二分搜索代替线性搜索
        int lo = 1, hi = n;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            int broken = dp(k - 1, mid - 1); // 鸡蛋碎了
            int notBroken = dp(k, n - mid);  // 鸡蛋没碎
            // res = min(max(鸡蛋碎，鸡蛋没碎) + 1)
            if (broken > notBroken) {
                hi = mid - 1; 
                res = Math.min(res, broken + 1);
            } else {
                lo = mid + 1; 
                res = Math.min(res, notBroken + 1); 
            }
        }

        memo.put(k + "," + n, res);
        return res;
    }
}
