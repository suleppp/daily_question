class Trie {

    class TrieNode{
        public int pass;
        public int end;
        public TrieNode[] nexts;

        TrieNode(){
            pass=0;
            end=0;
            nexts=new TrieNode[26];
        }
    }

    public TrieNode root;

    public Trie() {
        root=new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode node=root;
        node.pass++;
        for(int i=0,path;i<word.length();i++){
            path=word.charAt(i)-'a';
            if(node.nexts[path]==null){
                node.nexts[path]=new TrieNode();
            }
            node=node.nexts[path];
            node.pass++;
        }
        node.end++;
    }
    
    public boolean search(String word) {
        TrieNode node=root;
        for(int i=0,path;i<word.length();i++){
            path=word.charAt(i)-'a';
            if(node.nexts[path]==null) return false;
            node=node.nexts[path];
        }
        return node.end!=0;
    }
    
    public boolean startsWith(String prefix) {
        TrieNode node=root;
        for(int i=0,path;i<prefix.length();i++){
            path=prefix.charAt(i)-'a';
            if(node.nexts[path]==null) return false;
            node=node.nexts[path];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */