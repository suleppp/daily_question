class Solution {
public:
    const static int N=100;
    int fa[N];
    int pointSet[N];
    int bianSet[N];
    
    void build(int n){
        for(int i=0;i<n;i++){
            fa[i]=i;
            pointSet[i]=1;
            bianSet[i]=0;
        }
    }

    int findFa(int x){
        if(x!=fa[x]){
            fa[x]=findFa(fa[x]);
        }
        return fa[x];
    }

    void unionSet(int x,int y){
        int fx=findFa(x);
        int fy=findFa(y);
        if(fx!=fy){
            fa[fx]=fy;
            pointSet[fy]+=pointSet[fx];
            bianSet[fy]+=bianSet[fx];
        }
        bianSet[fy]++;
    }
    pair<int,int> getPointAndBian(int x){
        return make_pair(pointSet[findFa(x)],bianSet[findFa(x)]);
    } 


    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        build(n);
        for(auto& e:edges){
            unionSet(e[0],e[1]);
        }
        set<int> s;
        for(int i=0;i<n;i++){
            s.insert(findFa(i));
        }
        int ans=0;
        for(auto& item:s){
            pair<int,int> p=getPointAndBian(item);
            if((p.first-1)*p.first/2==p.second) ans++;
        }
        return ans;
    }
};