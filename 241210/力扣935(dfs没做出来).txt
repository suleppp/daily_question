class Solution {
public:
    const int MOD=1e9+7;
    char graph[4][3]={{'1','2','3'},
                      {'4','5','6'},
                      {'7','8','9'},
                      {'*','0','#'}};
    set<string> res;
    int dx[8]={-2,-1,1,2,2,1,-1,-2};
    int dy[8]={-1,-2,-2,-1,1,2,2,1};
    int knightDialer(int n) {
        for(int i=0;i<4;i++){
            for(int j=0;j<3;j++){
                if (graph[i][j]!='*'&&graph[i][j]!='#') {
                    dfs(i, j,"", n);
                }
            }
        }
        return res.size();
    }

    void dfs(int x,int y,string path,int step){
        if(!(x>=0&&x<4&&y>=0&&y<3&&graph[x][y]!='*'&&graph[x][y]!='#')) return;

        path=path+graph[x][y];

        if(step==1){
            res.insert(path);
            return;
        }
        
        for(int i=0;i<8;i++){
            int nx=dx[i]+x;
            int ny=dy[i]+y;
                dfs(nx,ny,path,step-1);
        }
    }
};