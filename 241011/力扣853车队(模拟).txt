class Solution {
    public int carFleet(int target, int[] position, int[] speed) {
        int n=position.length;
        if(n==1) return 1;
        int[][] arr=new int[n][2];
        for(int i=0;i<n;i++){
            arr[i][0]=position[i];
            arr[i][1]=speed[i];
        }
        Arrays.sort(arr,(a,b)->a[0]-b[0]);//离终点越远越排前面
        double[] times=new double[n];//记录所有车到达终点所需的时间
        for(int i=0;i<n;i++){
            times[i]=(double)(target-arr[i][0])/arr[i][1];
        }
        double[] suf=new double[n];//从后往前看,看每辆车最迟需要多久到达
        //也就是说,前面的车如果够慢,那到达的时间就以前面的车为准,前面计算的time都是理想状态
        suf[n-1]=times[n-1];
        for(int i=n-2;i>=0;i--){
            //前面的车够慢肯定追得上,够快就追不上
            suf[i]=Math.max(suf[i+1],times[i]);
        }
        int ans=n;//初始化全部车都是单独的车队,然后不断清除有超越潜质的车
        for(int i=0;i<n-1;i++){
            if(times[i]<=suf[i+1]){
                ans--;
            }
        }
        return ans;
    }
}