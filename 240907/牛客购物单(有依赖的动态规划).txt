package class073;

import java.io.*;

// 有依赖的背包(模版)
// 物品分为两大类：主件和附件
// 主件的购买没有限制，钱够就可以；附件的购买有限制，该附件所归属的主件先购买，才能购买这个附件
// 例如，若想买打印机或扫描仪这样的附件，必须先购买电脑这个主件
// 以下是一些主件及其附件的展示：
// 电脑：打印机，扫描仪 | 书柜：图书 | 书桌：台灯，文具 | 工作椅：无附件
// 每个主件最多有2个附件，并且附件不会再有附件，主件购买后，怎么去选择归属附件完全随意，钱够就可以
// 所有的物品编号都在1~m之间，每个物品有三个信息：价格v、重要度p、归属q
// 价格就是花费，价格 * 重要度 就是收益，归属就是该商品是依附于哪个编号的主件
// 比如一件商品信息为[300,2,6]，花费300，收益600，该商品是6号主件商品的附件
// 再比如一件商品信息[100,4,0]，花费100，收益400，该商品自身是主件(q==0)
// 给定m件商品的信息，给定总钱数n，返回在不违反购买规则的情况下最大的收益

public class Code05_DependentKnapsack {
    //有依赖的01背包
    /*
        01背包就是要和不要的问题,如果不要就看前一个状态,如果要就舍弃一点背包容量.
        买附件的前提是主商品要购买,那么可以只考虑主商品,遍历所有主商品要或者不要,如果不要就看上一件主商品怎么买最值,
        如果买,在不超过预算的情况下,要么只买主商品,要么买主商品加附件1,要么买主商品加附件2,要么买主商品加附件1和附件2
        就不在每个商品上展开了,只考虑主商品,如果主商品买才往下分支
        dp[i][j]:在前i个商品中挑选,花费不超过j元的情况下,所得的最大价值
    * */
    public static int MAXN=33001;//总钱数
    public static int MAXM=61;//总物品数
    public static int[] cost=new int[MAXN];//第i号商品所需花费
    public static int[] val=new  int[MAXM];//第i号商品价值
    public static boolean[] king=new boolean[MAXM];//该商品是否为主商品
    public static int[] fans=new int[MAXM];//该主商品有多少件附件
    public static int[][] follows=new int[MAXN][2];//该主商品的附件的编号,因为最多两件附件
    public static int n,m;

    public static void clean(){
        for(int i=1;i<m;i++){
            fans[i]=0;
        }
    }


    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StreamTokenizer in=new StreamTokenizer(br);
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        while (in.nextToken() != StreamTokenizer.TT_EOF) {
            n = (int) in.nval;
            in.nextToken();
            m = (int) in.nval;
            clean();
            for (int i = 1, v, p, q; i <= m; i++) {
                in.nextToken(); v = (int) in.nval;
                in.nextToken(); p = (int) in.nval;
                in.nextToken(); q = (int) in.nval;
                cost[i] = v;//花费
                val[i] = v * p;//价值
                king[i] = q == 0;//是否为主商品
                if (q != 0) {
                    follows[q][fans[q]++]=i;//如果不是主商品,就标记该商品为哪个主商品的附件,并让这个主商品的附件数增加
                }
            }
            out.println(compute1());
        }
        out.flush();
        out.close();
        br.close();
    }

    public static int compute1(){
        int[][] dp=new int[m+1][n+1];
        //当一件商品也没有的时候,总价值都为0
        int p=0;//上一件主商品的编号
        for(int i=1,fan1,fan2;i<=m;i++){
            if(king[i]){//如果为主商品才考虑
                for(int j=0;j<=n;j++){
                    //case1:不要这件
                    dp[i][j]=dp[p][j];
                    if(j-cost[i]>=0){//如果在预算内
                        //case2:只要主商品
                        dp[i][j]=Math.max(dp[i][j],dp[p][j-cost[i]]+val[i]);
                    }

                    fan1=fans[i]>=1?follows[i][0]:-1;//如果这件的主商品的附件数大于1,那么就记录第一件附件的编号
                    fan2=fans[i]>=2?follows[i][1]:-1;//附件数大于2记录第二件附件的编号
                    if(fan1!=-1&&j-cost[i]-cost[fan1]>=0){
                        //case3:要主商品和附件1
                        dp[i][j]=Math.max(dp[i][j],dp[p][j-cost[i]-cost[fan1]]+val[i]+val[fan1]);
                    }
                    if(fan2!=-1&&j-cost[i]-cost[fan2]>=0){
                        //case4:要主商品和附件2
                        dp[i][j]=Math.max(dp[i][j],dp[p][j-cost[i]-cost[fan2]]+val[i]+val[fan2]);
                    }
                    if(fan1!=-1&&fan2!=-1&&j-cost[i]-cost[fan1]-cost[fan2]>=0){
                        //case5:要主商品和附件1与附件2
                        dp[i][j]=Math.max(dp[i][j],dp[p][j-cost[i]-cost[fan1]-cost[fan2]]+val[i]+val[fan1]+val[fan2]);
                    }
                }
                p=i;//更新上一件主商品的编号
            }

        }

        return dp[p][n];
    }
}
