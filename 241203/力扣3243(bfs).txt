class Solution {
public:
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<int> ans;
        vector<vector<int>> grid(n);
        for(int i=0;i<n-1;i++){
            grid[i].push_back(i+1);
        }

        for(int i=0;i<queries.size();i++){
            grid[queries[i][0]].push_back(queries[i][1]);
            ans.push_back(bfs(n,grid));
        }
        return ans;
    }

    int bfs(int n,vector<vector<int>>& grid){
        queue<int> q;
        vector<bool> visited(n,false);
        q.push(0);
        int step=0;
        while(!q.empty()){
            int sz=q.size();
            for(int i=0;i<sz;i++){
                int cur=q.front();
                if(cur==n-1) return step;
                q.pop();
                for(auto& point:grid[cur]){
                    if(!visited[point]){
                        q.push(point);
                        visited[point]=true;
                    }
                }
            }
            step++;
        }
        return step;
    }
};