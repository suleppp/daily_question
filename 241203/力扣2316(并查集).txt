class Solution {
public:
    const static int N=1e6;
    int fa[N];
    int setSize[N];
    void build(int n){
        for(int i=0;i<n;i++){
            fa[i]=i;
            setSize[i]=1;
        }
    }

    int find(int x){
        if(x!=fa[x]){
            fa[x]=find(fa[x]);
        }
        return fa[x];
    }

    void unionSet(int x,int y){
        int fx=find(x);
        int fy=find(y);
        if(fx!=fy){
            if(setSize[fx]>setSize[fy]){
                fa[fy]=fx;
                setSize[fx] += setSize[fy];
            }
            else{
                fa[fx]=fy;
                setSize[fy] += setSize[fx];
            }
        }
    }

    int getSize(int x){
        return setSize[find(x)];
    }


    long long countPairs(int n, vector<vector<int>>& edges) {
        build(n);
        for(auto& e:edges){
            unionSet(e[0],e[1]);
        }
        set<int> s;
        for(int i=0;i<n;i++){
            s.insert(find(i));
        }
        long long ans=0;
        long long preCnt=0;
        for(auto& elem:s){
            ans+=preCnt*getSize(elem);
            preCnt+=getSize(elem);
        }
        return ans;
    }
};