class Solution {
    public long maxStrength(int[] nums) {
        //动态规划
        int n=nums.length;
        long[] maxdp=new long[n];
        long[] mindp=new long[n];
        maxdp[0]=nums[0];
        mindp[0]=nums[0];
        long ans=nums[0];
        for(int i=1;i<n;i++){
            //如果不选i
            maxdp[i]=nums[i];
            mindp[i]=nums[i];
            //如果选
            if(nums[i]>0){
                maxdp[i]=Math.max(maxdp[i],maxdp[i-1]*nums[i]);
                mindp[i]=Math.min(mindp[i],mindp[i-1]*nums[i]);
            }
            else if(nums[i]<0){
                maxdp[i]=Math.max(maxdp[i],Math.max(maxdp[i-1],mindp[i-1]*nums[i]));
                mindp[i]=Math.min(mindp[i],Math.min(maxdp[i-1]*nums[i],mindp[i-1]));
            }
            else{
                maxdp[i]=Math.max(maxdp[i],maxdp[i-1]);
                mindp[i]=Math.min(mindp[i],mindp[i-1]);
            }
            ans=Math.max(ans,maxdp[i]);
        }
        return ans;
    }
}