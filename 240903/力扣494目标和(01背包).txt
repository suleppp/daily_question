class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        //将问题转化为01背包,首先要明确一下几点
        //1.尽管nums数组是非负的,但是由于可以在前面随意添加正负号,所以nums有正有负对结果都不会有影响
        //2.不论数组中的元素正负号变换如何,整个数组的和的奇偶性不会改变,所以如果sum奇偶性和target不一致一定凑不出这个target
        //3.sum<target一定没有答案
        //4.改变正负数无非是将一些数变为正数,一些数变为负数,那么我们将这些正数化为一个集合,其和为sum(A),那么,要变为负数的集合的和为sum(B)
        //sum(A)-sum(B)=target,我们将两边加上sum(A)+sum(B),sum(A)-sum(B)+sum(A)+sum(B)=target+sum(A)+sum(B),
        //那么就转化为了2*sum(A)=target+数组所有数累加和
        //sum(A)=(target+数组所有累加和)/2
        //也就将问题转化成了:要求有多少方法组成target,就是求有多少子序列累加和等于(target+数组所有累加和)/2

        //注意:01背包并不一定和重量和价值有关,它是一种选择性问题,在约束条件下如何选择一组最优的物品
        //1.要么选要么不选  2.满足某些约束条件,如本题要满足前i个要凑到j的方案数   3.目标最大化或最小化
        int sum=0;
        for(int n:nums){
            sum+=n;
        }
        if(sum<target) return 0;
        if(((target&1)^(sum&1))==1) return 0;//奇偶性不一致
        return zeroone(nums,(target+sum)>>1);
    }

    //就是求nums中有多少子序列的和为suma
    //dp[i][j]=dp[i-1][j]+dp[i-1][j-nums[i]]
    public int zeroone(int[] nums,int suma){
        if(suma<0) return 0;
        int n=nums.length;
        int[][] dp=new int[n+1][suma+1];
        dp[0][0]=1;//一个数也没有的时候能凑出0的方法数
        for(int i=1;i<=n;i++){
            dp[i][0]=1;
            for(int j=0;j<=suma;j++){
                dp[i][j]=dp[i-1][j];
                if(j-nums[i-1]>=0){
                    dp[i][j]+=dp[i-1][j-nums[i-1]];
                }
            }
        }
        return dp[n][suma];
    }
}