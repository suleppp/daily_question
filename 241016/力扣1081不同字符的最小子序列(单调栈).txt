class Solution {
    public String smallestSubsequence(String s) {
        //字典序最小--->单调栈
        //字符只包含一次--->词频表,用于处理栈顶弹出的时候,后续是否还有该字符,如果没有就不能弹出了
        //还需要一个entry的数组判断相同元素是否在栈内
        char[] stk=new char[26];
        int r=0;
        int[] cnt=new int[26];
        boolean[] entry=new boolean[26];
        char[] arr=s.toCharArray();
        Arrays.fill(entry,false);
        for(char c:arr){
            cnt[c-'a']++;
        }

        for(int i=0;i<arr.length;i++){
            if(!entry[arr[i]-'a']){
                while(r>0&&arr[i]<stk[r-1]&&cnt[stk[r-1]-'a']>0){
                    entry[stk[r-1]-'a']=false;
                    r--;
                }
                entry[arr[i]-'a']=true;
                stk[r++]=arr[i];
            }
            cnt[arr[i]-'a']--;
        }

        return String.valueOf(stk,0,r);
    }
}