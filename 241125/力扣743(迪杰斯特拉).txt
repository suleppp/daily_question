class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<int[]>> graph=new ArrayList<>();
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge:times){
            graph.get(edge[0]).add(new int[]{edge[1],edge[2]});
        }
        int[] distance=new int[n+1];
        Arrays.fill(distance,Integer.MAX_VALUE);
        distance[k]=0;
        boolean[] visited=new boolean[n+1];

        PriorityQueue<int[]> heap=new PriorityQueue<>((a,b)->a[1]-b[1]);
        heap.add(new int[]{k,0});
        while(!heap.isEmpty()){
            int u=heap.poll()[0];
            if(visited[u]) continue;
            visited[u]=true;
            for(int[] edge:graph.get(u)){
                int v=edge[0];
                int w=edge[1];
                if(!visited[v]&&distance[u]+w<distance[v]){
                    distance[v]=distance[u]+w;
                    heap.add(new int[]{v,distance[u]+w});
                }
            }
        }

        int ans=Integer.MIN_VALUE;
        for(int i=1;i<=n;i++){
            if(distance[i]==Integer.MAX_VALUE){
                return -1;
            }
            ans=Math.max(ans,distance[i]);
        }
        return ans;
    }
}