class Solution {
    public static int MAXN=50001;
    public static int BASE=10;
    public static int[] cnts=new int[BASE];
    public static int[] help=new int[MAXN];
    public int[] sortArray(int[] nums) {
        //基数排序
        //对负数进行预处理
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            min=Math.min(min,nums[i]);
            max=Math.max(max,nums[i]);
        }
        for(int i=0;i<nums.length;i++){
            nums[i]-=min;
        }
        //计算数组中最大数的位数
        int bits=computeBits(max-min);
        radixSort(nums,bits);
        for(int i=0;i<nums.length;i++){
            nums[i]+=min;
        }
        return nums;
    }

    public static int computeBits(int num){
        int cnt=0;
        while(num>0){
            num/=BASE;
            cnt++;
        }
        return cnt;
    }

    public static void radixSort(int[] nums,int bits){
        int n=nums.length;
        for(int offset=1;bits>0;offset*=BASE,bits--){
            Arrays.fill(cnts,0);
            for(int i=0;i<n;i++){
                cnts[(nums[i]/offset)%BASE]++;
            }
            for(int i=1;i<BASE;i++){
                cnts[i]+=cnts[i-1];
            }
            for(int i=n-1;i>=0;i--){
                help[--cnts[(nums[i]/offset)%BASE]]=nums[i];
            }
            for(int i=0;i<n;i++){
                nums[i]=help[i];
            }
        }
    }
}