class Solution {
    public String minWindow(String str, String tar) {
        //一种朴素的想法就是 结果最坏也就是返回的答案子串的长度为str.len
        //那么我们以str.len范围内的所有不同长度窗口遍历str，看多长的窗口最终涵盖t
        //最短的那个能覆盖tar的窗口内的子串肯定就是答案
        //但是这种解法肯定超时
        //现在的关键问题是怎么知道窗口内的真的存在涵盖tar所有字符的子串
        //使用debt来记录目前缺少的字符数量，也就是tar.len
        //用数组cnts[]来记录abcdef..xyz有多少个，初始化遍历tar中的字符，使其个数都为负数
        //当cnts[]中元素个数为负数的时候，代表窗口还不能涵盖tar中所有字符
        //当遍历到str中的字符在cnts[]中个数为负数的时候，就让debt--，当debt为0的时候就代表能涵盖tar中的所有字符
        //这么做才能真正计算到tar中所需的字符，而cnts[]中元素个数为正数的时候代表是窗口内多余的元素
        char[] s=str.toCharArray();
        char[] t=tar.toCharArray();
        int n=s.length;
        int m=t.length;
        if(n<m) return "";
        //初始化debt和cnts[]
        int debt=m;
        int[] cnts=new int[256];
        for(char c:t){
            cnts[c]--;
        }

        int len=Integer.MAX_VALUE;//不能初始化为s.len，因为如果s和t完全相同，那么最终返回的答案会因为和s.len相等而返回空串
        int start=0;int end=0;//记录窗口内最优起始点和重点，因为返回答案是字符串，要截取
        for(int l=0,r=0;r<n;r++){
            cnts[s[r]]++;
            if(cnts[s[r]]<=0){//如果为负数代表是“有用的字符”
                debt--;
            }
            //说明窗口能涵盖t的所有字符，缩小边界
            if(debt==0){
                while(cnts[s[l]]>0){
                    cnts[s[l++]]--;
                }
                if(r-l+1<len){
                    start=l;
                    end=r;
                    len=r-l+1;
                }
            }
        }
        return len==Integer.MAX_VALUE?"":str.substring(start,start+len);
    }
}